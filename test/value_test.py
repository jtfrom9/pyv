# -*- coding: utf-8 -*-
import sys
import unittest

from test_common import testOf, grammar, debug

@testOf(grammar.non_zero_unsigned_number)
def test0(self):
    #debug(grammar.non_zero_unsigned_number)
    self.try_parse_pass("1")
    self.try_parse_pass(" 1")
    self.try_parse_pass("1 ")
    self.try_parse_pass("120")
    self.try_parse_fail("120 345")
    self.try_parse_fail("0")

@testOf(grammar.unsigned_number)
def test1(self):
    self.try_parse_fail("-1")
    self.try_parse_pass("0")
    self.try_parse_pass("000")
    self.try_parse_pass("00012")
    self.try_parse_pass("00012_800")
    self.try_parse_pass("12345678_9")
    self.try_parse_fail("12345678_9a0")
    self.try_parse_fail("12345678 1")
    self.try_parse_pass("12345678_1")
    self.try_parse_pass("0_0_0")
    self.try_parse_fail("0_0_0 1")

@testOf(grammar.binary_value)
def test2(self):
    self.try_parse_pass("0")
    self.try_parse_pass("0_1")
    self.try_parse_pass("x")
    self.try_parse_pass("ZX_?")
    self.try_parse_pass("00_1?_x")
    self.try_parse_fail("0 ?")
    self.try_parse_fail("_?")
    self.try_parse_pass("0_1_x_z_?")
    self.try_parse_fail("0_1_x_z_!")
    self.try_parse_pass("?_0")

@testOf(grammar.octal_value)
def test3(self):
    self.try_parse_pass("0")
    self.try_parse_pass("0_1")
    self.try_parse_pass("x")
    self.try_parse_pass("ZX_?")
    self.try_parse_pass("00_1?_x")
    self.try_parse_fail("0 ?")
    self.try_parse_fail("_?")
    self.try_parse_pass("0_1_x_z_?")
    self.try_parse_fail("0_1_x_z_!")
    self.try_parse_pass("?_0")
    self.try_parse_pass("0")
    self.try_parse_pass("0_")
    self.try_parse_pass("x1X_??")
    self.try_parse_fail("086")
    self.try_parse_fail("a")
    self.try_parse_fail("f")
    self.try_parse_fail("g")
    self.try_parse_pass("1x")
    self.try_parse_pass("z1234567_0x_?")
    self.try_parse_fail("z1234567_08x?")

@testOf(grammar.hex_value)
def test4(self):
    self.try_parse_pass("0")
    self.try_parse_pass("0_1")
    self.try_parse_pass("x")
    self.try_parse_pass("ZX_?")
    self.try_parse_pass("00_1?_x")
    self.try_parse_fail("0 ?")
    self.try_parse_fail("_?")
    self.try_parse_pass("0_1_x_z_?")
    self.try_parse_fail("0_1_x_z_!")
    self.try_parse_pass("?_0")
    self.try_parse_pass("0")
    self.try_parse_pass("0_")
    self.try_parse_pass("x1X_??")
    self.try_parse_pass("086")
    self.try_parse_pass("a")
    self.try_parse_pass("f")
    self.try_parse_fail("g")
    self.try_parse_pass("1x")
    self.try_parse_pass("z1234567_0x_?")
    self.try_parse_pass("z1234567_08x?")
    

@testOf(grammar.decimal_base)
def test5(self):
    self.try_parse_pass("'sd")
    self.try_parse_pass("'d")
    self.try_parse_fail("'Ds")
    self.try_parse_fail("'S")
    self.try_parse_fail("d")
    self.try_parse_fail("' d")
    self.try_parse_fail("'b")

@testOf(grammar.binary_base)
def test6(self):
    self.try_parse_pass("'sb")
    self.try_parse_pass("'b")
    self.try_parse_fail("'Bs")
    self.try_parse_fail("'S")
    self.try_parse_pass("'B")
    self.try_parse_fail("b")
    self.try_parse_fail("' b")
    self.try_parse_fail("'h")

@testOf(grammar.octal_base)
def test7(self):
    self.try_parse_pass("'so")
    self.try_parse_pass("'o")
    self.try_parse_fail("'Os")
    self.try_parse_fail("'S")
    self.try_parse_fail("o")
    self.try_parse_fail("' o")
    self.try_parse_fail("'h")
    self.try_parse_pass("'O")

@testOf(grammar.hex_base)
def test8(self):
    self.try_parse_pass("'sh")
    self.try_parse_pass("'h")
    self.try_parse_fail("'Hs")
    self.try_parse_fail("'S")
    self.try_parse_fail("h")
    self.try_parse_fail("' h")
    self.try_parse_fail("'b")
    self.try_parse_pass("'H")

@testOf(grammar.decimal_number)
def test9(self):
    self.try_parse_pass("123")
    self.try_parse_pass("01")
    self.try_parse_pass("'d0")
    print(self.try_parse_pass("5'd0").asXML())
    self.try_parse_pass("5'dx")
    self.try_parse_pass("5'dZ")
    self.try_parse_pass("5'd?")
    self.try_parse_pass("5'd?__")
    self.try_parse_fail("5'dXX")
    self.try_parse_pass("'dX___")
    self.try_parse_pass("'d?___")
    self.try_parse_fail("'d?___0")
    self.try_parse_fail("1'd")
    self.try_parse_pass("1'd1")
    self.try_parse_fail("0'd1")
    self.try_parse_fail("1'd1x")
    print(self.try_parse_pass("1'd5").asXML())
    print(self.try_parse_pass("10'dx").asXML())
    print(self.try_parse_pass("1'd?").asXML())
    print(self.try_parse_pass("20").asXML())

@testOf(grammar.binary_number)
def test10(self):
    self.try_parse_pass("4'b0000")
    self.try_parse_pass("4'SB0?00")
    self.try_parse_pass("8'Sbzzzz_xxxx")
    self.try_parse_pass("'b0000")
    self.try_parse_fail("'b00 00 ")
    self.try_parse_pass("'b 0000 ")
    self.try_parse_pass(" 32 'b 0000 ")
    self.try_parse_fail(" 3 2 'b 0000 ")
    print(self.try_parse_pass("'b0000").asXML())
    print(self.try_parse_pass("'b1000").asXML())
    print(self.try_parse_pass("8'B11").asXML())
    print(self.try_parse_pass("8'b110x0").asXML())
    print(self.try_parse_pass("40'b1??Zx0z011?1").asXML())

@testOf(grammar.octal_number)
def test11(self):
    print(self.try_parse_pass("'o0000").asXML())
    print(self.try_parse_pass("'o01234567").asXML())
    print(self.try_parse_pass("8'o77").asXML())
    print(self.try_parse_pass("8'o110x0").asXML())
    print(self.try_parse_pass("40'o1??Zx0z011?1").asXML())


@testOf(grammar.hex_number)
def test12(self):
    print(self.try_parse_pass("'h0000").asXML())
    print(self.try_parse_pass("'h0123456789abcdef").asXML())
    print(self.try_parse_pass("8'h77").asXML())
    print(self.try_parse_pass("8'hF1Fx0").asXML())
    print(self.try_parse_pass("40'h1??Zx0z011?1").asXML())

@testOf(grammar.real_number)
def test13(self):
    self.try_parse_pass("1.0e+1")
    self.try_parse_pass("23.5")
    self.try_parse_pass("0.0E-30")
    self.try_parse_pass("0.0")
    self.try_parse_pass("0.12345")
    self.try_parse_pass("1.0e-0")
    self.try_parse_pass("1.0e+0")
    self.try_parse_fail("-0.0")
    

if __name__=='__main__':
    unittest.main()

